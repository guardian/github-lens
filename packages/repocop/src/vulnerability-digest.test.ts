import type {
	repocop_github_repository_rules,
	view_repo_ownership,
} from '@prisma/client';
import { removeRepoOwner } from './remediations/shared-utilities';
import type { EvaluationResult, RepocopVulnerability, Team } from './types';
import { createDigest, getOwningRepos } from './vulnerability-digest';

const fullName = 'guardian/repo';
const anotherFullName = 'guardian/another-repo';
const teamSlug = 'team';
const teamId = BigInt(1);
const teamName = 'Team Name';

const team: Team = { id: teamId, name: teamName, slug: teamSlug };
const date = new Date('2021-01-01');

const ownershipRecord: view_repo_ownership = {
	github_team_name: teamName,
	github_team_id: teamId,
	repo_name: removeRepoOwner(fullName),
	full_name: fullName,
	role_name: '',
	archived: false,
	galaxies_team: null,
	team_contact_email: null,
};

const repocopRuleEvaluation: repocop_github_repository_rules = {
	default_branch_name: true,
	branch_protection: true,
	team_based_access: true,
	admin_access: true,
	archiving: true,
	topics: true,
	contents: true,
	evaluated_on: date,
	vulnerability_tracking: true,
	full_name: fullName,
};

const anotherOwnershipRecord: view_repo_ownership = {
	...ownershipRecord,
	github_team_id: BigInt(2),
	full_name: anotherFullName,
};

const anotherRepocopRuleEvaluation: repocop_github_repository_rules = {
	...repocopRuleEvaluation,
	full_name: anotherFullName,
};

const result: EvaluationResult = {
	fullName,
	repocopRules: repocopRuleEvaluation,
	vulnerabilities: [],
};

const anotherResult: EvaluationResult = {
	fullName: anotherFullName,
	repocopRules: anotherRepocopRuleEvaluation,
	vulnerabilities: [],
};

describe('getOwningRepos', () => {
	test('should retrieve results only for repos owned by the relevant team', () => {
		const expected = [
			{
				fullName: 'guardian/repo',
				repocopRules: {
					admin_access: true,
					archiving: true,
					branch_protection: true,
					contents: true,
					default_branch_name: true,
					evaluated_on: date,
					full_name: 'guardian/repo',
					team_based_access: true,
					topics: true,
					vulnerability_tracking: true,
				},
				vulnerabilities: [],
			},
		];

		expect(
			getOwningRepos(
				team,
				[ownershipRecord, anotherOwnershipRecord],
				[result, anotherResult],
			),
		).toStrictEqual(expected);
	});
});

describe('createDigest', () => {
	it('should return undefined when no repos have vulnerabilities', () => {
		expect(createDigest(team, [ownershipRecord], [result])).toBeUndefined();
	});

	it('should return correct digest when repos have vulnerabilities', () => {
		const vulnerability: RepocopVulnerability = {
			source: 'Dependabot',
			open: true,
			severity: 'critical',
			package: 'jackson',
			urls: [],
			ecosystem: 'maven',
			alert_issue_date: '',
			isPatchable: true,
			CVEs: ['CVE-123'],
		};
		const resultWithVuln: EvaluationResult = {
			...result,
			vulnerabilities: [vulnerability],
		};
		expect(
			createDigest(team, [ownershipRecord], [resultWithVuln]),
		).toStrictEqual({
			teamSlug,
			subject: `Vulnerability Digest for ${teamName}`,
			message: String.raw`## guardian/repo

| Package | Severity | Ecosystem | Bump to fix? |
| ------- | -------- | --------- | ------------ |
| jackson | critical | maven     | true         |`,
		});
	});
});
