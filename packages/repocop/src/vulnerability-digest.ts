import type { view_repo_ownership } from '@prisma/client';
import { stripMargin } from 'common/src/string';
import type { EvaluationResult, Team } from './types';

export function getOwningRepos(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
) {
	const reposOwnedByTeam = repoOwners.filter(
		(repoOwner) => repoOwner.github_team_id === team.id,
	);

	const resultsOwnedByTeam = reposOwnedByTeam
		.map((repo) => {
			return results.find((result) => result.fullName === repo.full_name);
		})
		.filter((result): result is EvaluationResult => result !== undefined);

	return resultsOwnedByTeam;
}

interface DigestForRepo {
	fullName: string;
	vulnerabilityMessages: string[];
}

interface VulnerabilityDigest {
	teamSlug: string;
	repos: DigestForRepo[];
}

//TODO test me!!
function createDigestForRepo(result: EvaluationResult): DigestForRepo {
	return {
		fullName: result.fullName,
		vulnerabilityMessages: result.vulnerabilities.map((vuln) => {
			return stripMargin`
				| ${vuln.isPatchable ? 'patchable' : 'un-patchable'} ${vuln.severity} vulnerability
				| detected in ${vuln.package} via ${vuln.ecosystem}`;
		}),
	};
}

export function createDigest(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
): VulnerabilityDigest {
	const resultsForTeam = getOwningRepos(team, repoOwners, results);
	return {
		teamSlug: team.slug,
		repos: resultsForTeam.map((result) => createDigestForRepo(result)),
	};
}
