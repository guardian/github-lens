import type { view_repo_ownership } from '@prisma/client';
import type { TableEntry, TableRow } from 'ts-markdown';
import { h2, table, tsMarkdown } from 'ts-markdown';
import type { EvaluationResult, Team, VulnerabilityDigest } from './types';

export function getOwningRepos(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
) {
	const reposOwnedByTeam = repoOwners.filter(
		(repoOwner) => repoOwner.github_team_id === team.id,
	);

	const resultsOwnedByTeam = reposOwnedByTeam
		.map((repo) => {
			return results.find((result) => result.fullName === repo.full_name);
		})
		.filter((result): result is EvaluationResult => result !== undefined);

	return resultsOwnedByTeam;
}

//TODO test me!!
function createDigestForRepo(result: EvaluationResult): string | undefined {
	if (result.vulnerabilities.length === 0) {
		return undefined;
	}

	const tableValues: TableRow[] = result.vulnerabilities.map((vuln) => {
		return {
			Package: vuln.package,
			Severity: vuln.severity,
			Ecosystem: vuln.ecosystem,
			'Bump to fix?': vuln.isPatchable,
		};
	});

	const tableEntry: TableEntry = table({
		columns: [
			{ name: 'Package' },
			{ name: 'Severity' },
			{ name: 'Ecosystem' },
			{ name: 'Bump to fix?' },
		],
		rows: tableValues,
	});

	const body = [h2(result.fullName), tableEntry];

	return tsMarkdown(body);
}

//TODO test me!!
export function createDigest(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
): VulnerabilityDigest | undefined {
	const resultsForTeam = getOwningRepos(team, repoOwners, results);
	const digestsForRepos = resultsForTeam
		.map((result) => createDigestForRepo(result))
		.filter((digest): digest is string => !!digest);

	if (digestsForRepos.length === 0) {
		console.log(`No vulnerabilities found for ${team.slug}`);
		return undefined;
	}

	return {
		teamSlug: team.slug,
		subject: `Vulnerability Digest for ${team.name}`,
		message: digestsForRepos.join('\n\n'),
	};
}
