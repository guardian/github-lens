import type { view_repo_ownership } from '@prisma/client';
import type {
	EvaluationResult,
	RepocopVulnerability,
	Team,
	VulnerabilityDigest,
} from './types';
import { criticalFirstPredicate } from './utils';

export function getOwningRepos(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
) {
	const reposOwnedByTeam = repoOwners.filter(
		(repoOwner) => repoOwner.github_team_id === team.id,
	);

	const resultsOwnedByTeam = reposOwnedByTeam
		.map((repo) => {
			return results.find((result) => result.fullName === repo.full_name);
		})
		.filter((result): result is EvaluationResult => result !== undefined);

	return resultsOwnedByTeam;
}

export type VulnWithRepoName = RepocopVulnerability & { fullName: string };

//TODO change this fn name, and use VulnWithRepoName type from beginning!
function associateVulnsWithRepoNames(
	results: EvaluationResult[],
): VulnWithRepoName[] {
	return results
		.map((result) =>
			result.vulnerabilities.map((vuln) => {
				return { ...vuln, fullName: result.fullName };
			}),
		)
		.flat();
}

export function getTopVulns(vulnerabilities: VulnWithRepoName[]) {
	return vulnerabilities
		.sort(criticalFirstPredicate)
		.slice(0, 10)
		.sort((v1, v2) => v1.fullName.localeCompare(v2.fullName));
}

//TODO test me!!
export function createDigest(
	team: Team,
	repoOwners: view_repo_ownership[],
	results: EvaluationResult[],
): VulnerabilityDigest | undefined {
	const resultsForTeam = getOwningRepos(team, repoOwners, results);

	const vulns = associateVulnsWithRepoNames(resultsForTeam);
	const topVulns = getTopVulns(vulns);

	// todo make this look like nice later
	const message = topVulns.map((v) => JSON.stringify(v)).join('\n');

	// const digestsForRepos = resultsForTeam
	// 	.map((result) => createDigestForRepo(result))
	// 	.filter((digest): digest is string => !!digest);

	// if (digestsForRepos.length === 0) {
	// 	console.log(`No vulnerabilities found for ${team.slug}`);
	// 	return undefined;
	// }

	return {
		teamSlug: team.slug,
		subject: `Vulnerability Digest for ${team.name}`,
		message,
	};
}
