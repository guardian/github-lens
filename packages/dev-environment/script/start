#!/usr/bin/env bash

set -e

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
ROOT_DIR=$DIR/../../..

MAIN_ENV_FILE=$ROOT_DIR/.env
LOCAL_ENV_FILE=$HOME/.gu/service_catalogue/.env.local
clear='\033[0m'
cyan='\033[0;36m'
yellow="\033[1;33m"

step(){
  ((STEP_COUNT++))
  echo -e "\n${cyan}Step ${STEP_COUNT}${clear}: $1"
}

step "Setting up libpq"
if ! brew list "libpq" &>/dev/null; then
    brew install "libpq"
else
    echo "libpq is already installed"
fi

get_db_password() {
    step "Getting DB credentials"
    SECRET_NAME=$(aws secretsmanager list-secrets \
    --profile deployTools --region eu-west-1 \
    --filters Key=tag-value,Values=CODE  | jq '.SecretList[].Name' | grep Postgres | tr -d '"')
    SECRET_STRING=$(aws secretsmanager get-secret-value \
    --secret-id "$SECRET_NAME" \
    --profile deployTools --region eu-west-1 | jq '.SecretString | fromjson')
    CODE_DB_PASSWORD=$(echo "$SECRET_STRING" | jq -r '.password')
    CODE_HOST=$(echo "$SECRET_STRING" | jq -r '.host')
    unset SECRET_STRING
    unset SECRET_NAME
}

insert_into_db() {
      PGPASSWORD=${DATABASE_PASSWORD}  psql \
    -U postgres -h "${DATABASE_HOSTNAME}" -p 5432 -d "${DATABASE_NAME}" -f "$1.sql" -q
    rm "$1.sql"

    echo "Transfer of $1 data complete âœ…"
}

copy(){
    echo "Copying table $1 to local database"
    PGPASSWORD=${CODE_DB_PASSWORD} pg_dump \
    -U postgres -h "${CODE_HOST}" -p 5432 -d "${DATABASE_NAME}" -t "$1" -f "$1.sql" \
    --no-owner --no-privileges --inserts --data-only

    insert_into_db "$1"
}

step "Checking AWS credentials"
STATUS=$(aws sts get-caller-identity --profile deployTools 2>&1 || true)
if [[ ${STATUS} =~ (ExpiredToken) ]]; then
  echo "Credentials for the deployTools profile have expired. Please fetch new credentials, and run this script again."
  exit 1
elif [[ ${STATUS} =~ ("could not be found") ]]; then
  echo "Credentials for the deployTools profile are missing. Please fetch some, and run this script again."
  exit 1
else
  echo "AWS credentials are valid"
fi

get_db_password
source "$MAIN_ENV_FILE"

step "Launching Docker containers"
if (docker info) 2>&1 >/dev/null; then
  docker-compose -f "${DIR}/../docker-compose.yaml" --env-file "$MAIN_ENV_FILE" --env-file "$LOCAL_ENV_FILE" up -d --build
else
  echo "Docker is not running. Please start Docker."
  exit 1
fi

step "Baselining DB"
echo -e "${yellow}Please note that this will drop all tables in the local database${clear}"
npm -w cli start migrate -- --stage DEV --confirm

tables_to_copy=(
  "snyk_issues"
  "snyk_projects"
  "galaxies_teams_table"
  "github_team_repositories"
  "github_teams"
  "github_repositories"
  "github_repository_branches"
  "github_workflows"
  "github_languages"
  "aws_organizations_accounts"
  "aws_organizations_account_parents"
  "aws_organizations_organizational_units"
  "aws_ec2_instances"
  "aws_cloudformation_stacks"
)

for table in "${tables_to_copy[@]}"; do
  copy "$table" &
done

wait

step "Cleaning up"
unset CODE_DB_PASSWORD
unset CODE_HOST
