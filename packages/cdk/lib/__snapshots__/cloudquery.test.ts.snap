// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Cloudquery stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuVpcParameter",
      "GuSubnetListParameter",
      "GuAmiParameter",
      "GuInstanceRole",
      "GuSSMRunCommandPolicy",
      "GuDescribeEC2Policy",
      "GuLoggingStreamNameParameter",
      "GuLogShippingPolicy",
      "GuDistributionBucketParameter",
      "GuGetDistributablePolicy",
      "GuParameterStoreReadPolicy",
      "GuHttpsEgressSecurityGroup",
      "GuAutoScalingGroup",
      "GuWazuhAccess",
    ],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "AMICloudquery": {
      "Description": "Amazon Machine Image ID for the app cloudquery. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "cloudqueryPrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
  },
  "Resources": {
    "DescribeEC2PolicyFF5F9295": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetDistributablePolicyCloudquery19347D25": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DistributionBucketName",
                    },
                    "/deploy/TEST/cloudquery/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyCloudquery19347D25",
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GuHttpsEgressSecurityGroupCloudquery3AE9FC4C": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupCloudquerytoCloudqueryPostgresInstance1SecurityGroup0B337A0CIndirectPort8E76DF51": {
      "Properties": {
        "Description": "to CloudqueryPostgresInstance1SecurityGroup0B337A0C:{IndirectPort}",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "PostgresInstance1SecurityGroupFA28C3C0",
            "GroupId",
          ],
        },
        "FromPort": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCloudquery3AE9FC4C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "GuLogShippingPolicy981BFE5A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleCloudquery54F86B54": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ParameterStoreReadCloudqueryA859D391": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudquery",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudquery/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresInstance16DE4286E": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "AllocatedStorage": "100",
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t4g.small",
        "DBSubnetGroupName": {
          "Ref": "PostgresInstance1SubnetGroupCAC045A5",
        },
        "EnableIAMDatabaseAuthentication": true,
        "Engine": "postgres",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "PostgresInstance1SecurityGroupFA28C3C0",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "PostgresInstance1Secret7FA1A24B": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresInstance1SecretAttachmentBA0D257D": {
      "Properties": {
        "SecretId": {
          "Ref": "PostgresInstance1Secret7FA1A24B",
        },
        "TargetId": {
          "Ref": "PostgresInstance16DE4286E",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "PostgresInstance1SecurityGroupFA28C3C0": {
      "Properties": {
        "GroupDescription": "Security group for PostgresInstance1 database",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresInstance1SecurityGroupfromCloudqueryGuHttpsEgressSecurityGroupCloudquery6CC82385IndirectPort01B1A490": {
      "Properties": {
        "Description": "from CloudqueryGuHttpsEgressSecurityGroupCloudquery6CC82385:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresInstance1SecurityGroupFA28C3C0",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCloudquery3AE9FC4C",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PostgresInstance1SubnetGroupCAC045A5": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for PostgresInstance1 database",
        "SubnetIds": {
          "Ref": "cloudqueryPrivateSubnets",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "SSMRunCommandPolicy244E1613": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply",
                "ssm:UpdateInstanceInformation",
                "ssm:ListInstanceAssociations",
                "ssm:DescribeInstanceProperties",
                "ssm:DescribeDocumentParameters",
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ssm-run-command-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WazuhSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow outbound traffic from wazuh agent to manager",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh event logging",
            "FromPort": 1514,
            "IpProtocol": "tcp",
            "ToPort": 1514,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh agent registration",
            "FromPort": 1515,
            "IpProtocol": "tcp",
            "ToPort": 1515,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "asgCloudqueryASG40AB7667": {
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "asgCloudqueryLaunchConfigEECD8C1E",
        },
        "MaxSize": "2",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "cloudquery",
          },
          {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "PropagateAtLaunch": true,
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Cloudquery/asgCloudquery",
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
        ],
        "VPCZoneIdentifier": {
          "Ref": "cloudqueryPrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "asgCloudqueryInstanceProfileD6927F3E": {
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRoleCloudquery54F86B54",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "asgCloudqueryLaunchConfigEECD8C1E": {
      "DependsOn": [
        "InstanceRoleCloudquery54F86B54",
      ],
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "asgCloudqueryInstanceProfileD6927F3E",
        },
        "ImageId": {
          "Ref": "AMICloudquery",
        },
        "InstanceType": "t4g.small",
        "MetadataOptions": {
          "HttpTokens": "required",
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "GuHttpsEgressSecurityGroupCloudquery3AE9FC4C",
              "GroupId",
            ],
          },
          {
            "Fn::GetAtt": [
              "WazuhSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash
# Install Cloudquery
set -xe
curl -L https://github.com/cloudquery/cloudquery/releases/download/cli-v2.5.1/cloudquery_linux_arm64 -o cloudquery
chmod a+x cloudquery
# Add configuration files
cat > aws.yaml << EOL
kind: source
spec:
  name: 'aws'
  path: 'cloudquery/aws'
  version: 'v15.4.0'
  # tables: ["*"]
  destinations: ['postgresql']
  skip_tables:
    - aws_ec2_vpc_endpoint_services # this resource includes services that are available from AWS as well as other AWS Accounts
    - aws_cloudtrail_events
    - aws_docdb_cluster_parameter_groups
    - aws_docdb_engine_versions
    - aws_ec2_instance_types
    - aws_elasticache_engine_versions
    - aws_elasticache_parameter_groups
    - aws_elasticache_reserved_cache_nodes_offerings
    - aws_elasticache_service_updates
    - aws_neptune_cluster_parameter_groups
    - aws_neptune_db_parameter_groups
    - aws_rds_cluster_parameter_groups
    - aws_rds_db_parameter_groups
    - aws_rds_engine_versions
    - aws_servicequotas_services
  spec:
    regions:
      - eu-west-1
    accounts:
      - id: deployTools
        local_profile: deployTools

EOL
cat > postgresql.yaml << EOL
kind: destination
spec:
  name: 'postgresql'
  registry: 'github'
  path: 'cloudquery/postgresql'
  version: 'v3.0.0'
  spec:
    #TODO put credentials and adress later
    connection_string: 'postgresql://postgres:$PASSWORD@£HOST:5432/postgres?sslmode=disable'

EOL
# Replace password + db host
HOST=$(aws secretsmanager get-secret-value --secret-id ",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "PostgresInstance1Secret7FA1A24B",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "PostgresInstance1Secret7FA1A24B",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                " --region ",
                {
                  "Ref": "AWS::Region",
                },
                " | jq -r '.SecretString|fromjson|.host')
sed -i "s/£HOST/$HOST/g" postgresql.yaml
PASSWORD=$(aws secretsmanager get-secret-value --secret-id ",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "PostgresInstance1Secret7FA1A24B",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        "Fn::Select": [
                          1,
                          {
                            "Fn::Split": [
                              "-",
                              {
                                "Fn::Select": [
                                  6,
                                  {
                                    "Fn::Split": [
                                      ":",
                                      {
                                        "Ref": "PostgresInstance1Secret7FA1A24B",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  ],
                },
                " --region ",
                {
                  "Ref": "AWS::Region",
                },
                " | jq -r '.SecretString|fromjson|.password')
sed -i "s/£PASSWORD/$PASSWORD/g" postgresql.yaml
./cloudquery sync aws.yaml postgresql.yaml",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
  },
}
`;
